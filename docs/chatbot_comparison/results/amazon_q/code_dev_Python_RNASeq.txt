import pandas as pd
import rpy2.robjects as ro
from rpy2.robjects import pandas2ri
from rpy2.robjects.packages import importr
import numpy as np

def perform_differential_expression_analysis(count_file, condition1_samples, condition2_samples, output_file):
    """
    Perform differential expression analysis using edgeR.
    
    Args:
        count_file (str): Path to input CSV file containing read counts
        condition1_samples (list): List of sample names for condition 1
        condition2_samples (list): List of sample names for condition 2
        output_file (str): Path to output CSV file for results
    """
    # Read count data
    counts_df = pd.read_csv(count_file, index_col='Gene ID')
    
    # Convert to R dataframe
    pandas2ri.activate()
    counts_matrix = pandas2ri.py2rpy(counts_df)
    
    # Import required R packages
    base = importr('base')
    edger = importr('edgeR')
    stats = importr('stats')
    
    # Create DGEList object
    dge = edger.DGEList(counts=counts_matrix)
    
    # Create design matrix
    groups = []
    for col in counts_df.columns:
        if col in condition1_samples:
            groups.append('condition1')
        elif col in condition2_samples:
            groups.append('condition2')
    
    design = stats.model_matrix(ro.Formula('~ group'), 
                              data=base.data_frame(group=ro.StrVector(groups)))
    
    # Calculate normalization factors
    dge = edger.calcNormFactors(dge)
    
    # Estimate dispersions
    dge = edger.estimateGLMCommonDisp(dge, design)
    dge = edger.estimateGLMTrendedDisp(dge, design)
    dge = edger.estimateGLMTagwiseDisp(dge, design)
    
    # Fit GLM
    fit = edger.glmFit(dge, design)
    
    # Perform likelihood ratio test
    lrt = edger.glmLRT(fit, coef=2)
    
    # Get results
    results = edger.topTags(lrt, n=base.nrow(dge.rx2('counts')), adjust_method="BH")
    
    # Convert R results to pandas DataFrame
    results_df = pandas2ri.rpy2py(results.rx2('table'))
    
    # Add differential expression status
    results_df['Differential Expression Status'] = np.where(
        results_df['FDR'] < 0.05, 'Significant', 'Not Significant'
    )
    
    # Rename columns to match requirements
    results_df = results_df.rename(columns={
        'logFC': 'log2 Fold Change',
        'PValue': 'p-value',
        'FDR': 'Adjusted p-value'
    })
    
    # Save results to CSV
    results_df.to_csv(output_file)

if __name__ == "__main__":
    # Example usage
    count_file = "counts.csv"
    condition1_samples = ["Sample1", "Sample2", "Sample3"]
    condition2_samples = ["Sample4", "Sample5", "Sample6"]
    output_file = "differential_expression_results.csv"
    
    perform_differential_expression_analysis(
        count_file=count_file,
        condition1_samples=condition1_samples,
        condition2_samples=condition2_samples,
        output_file=output_file
    )
