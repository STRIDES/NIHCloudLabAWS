Generating code...

I'll share updates here as I work on this.

Summary of changes

I need to create a new file to implement the DNA sequence length calculator based on the provided code. I'll create a new Python script with the corrected version of the code.

I have created a corrected version of the DNA sequence length calculator that addresses several issues in the original code: proper error handling, modular design with separate functions for each task, comprehensive docstrings, and robust file handling. All the requirements have been met.

Files used
These fields can change throughout code generation

Reviewed: 0

Created: 1

dna_sequence_length.py

Changed: 0

Deleted: 0

```
import csv

def read_fasta(file_path):
    """
    Read a FASTA file and return a dictionary of sequences.
    
    Args:
        file_path (str): Path to the FASTA file
        
    Returns:
        dict: Dictionary with sequence IDs as keys and sequences as values
    """
    sequences = {}
    current_sequence_id = None
    current_sequence = ''
    
    try:
        with open(file_path, 'r') as file:
            for line in file:
                line = line.strip()
                if line.startswith('>'):
                    if current_sequence_id:
                        sequences[current_sequence_id] = current_sequence
                    current_sequence_id = line[1:].strip()
                    current_sequence = ''
                else:
                    current_sequence += line
            
            # Don't forget to add the last sequence
            if current_sequence_id:
                sequences[current_sequence_id] = current_sequence
                
    except FileNotFoundError:
        print(f"Error: The file {file_path} was not found.")
        raise
    except Exception as e:
        print(f"An error occurred while reading the file: {str(e)}")
        raise
        
    return sequences

def calculate_sequence_lengths(sequences):
    """
    Calculate lengths of DNA sequences.
    
    Args:
        sequences (dict): Dictionary of sequences
        
    Returns:
        list: List of tuples containing (sequence_id, length)
    """
    return [(seq_id, len(sequence)) for seq_id, sequence in sequences.items()]

def write_results_to_csv(results, output_file):
    """
    Write sequence lengths to CSV file.
    
    Args:
        results (list): List of tuples containing (sequence_id, length)
        output_file (str): Path to output CSV file
    """
    try:
        with open(output_file, 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['Sequence ID', 'Sequence Length'])
            writer.writerows(results)
    except Exception as e:
        print(f"An error occurred while writing to the CSV file: {str(e)}")
        raise

def main():
    """
    Main function to execute the DNA sequence length calculation workflow.
    """
    try:
        file_path = 'sequences.fasta'
        output_file = 'sequence_lengths.csv'
        
        # Read sequences from FASTA file
        sequences = read_fasta(file_path)
        
        # Calculate sequence lengths
        results = calculate_sequence_lengths(sequences)
        
        # Write results to CSV
        write_results_to_csv(results, output_file)
        
        print(f"Successfully processed {len(sequences)} sequences.")
        print(f"Results have been written to {output_file}")
        
    except Exception as e:
        print(f"Program failed: {str(e)}")
        raise

if __name__ == '__main__':
    main()
```
