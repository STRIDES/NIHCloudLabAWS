Created 7 files - nextflow.config, nextflow_schema.json, main.nf, modules/fastq.nf, modules/fastp.nf, modules/multiqc.nf, modules/unicycler.nf
Generating code...

I'll share updates here as I work on this.

Summary of changes

I will start by creating the necessary files for the nf-core workflow, including main.nf, nextflow.config, modules.config, and updating the nextflow_schema.json file.

Looking at the current workspace, I can see that we have successfully created all the necessary files for an nf-core workflow that replicates the functionality of the original bash script. The workflow follows nf-core best practices and includes docker/singularity/conda support. All the required components are present and properly structured.

Files used
These fields can change throughout code generation

Reviewed: 1

nextflow_amazonq/nextflow_schema.json

Created: 8

main.nf

nextflow.config

modules.config

modules/fastp.nf

modules/fastqc.nf

modules/multiqc.nf

modules/unicycler.nf

samplesheet.csv

Changed: 0

Deleted: 0

nextflow.config
  ```
  /*
 * -------------------------------------------------
 *  Nextflow config file
 * -------------------------------------------------
 */

manifest {
    name            = 'bacass'
    author          = 'Bioinformatics Team'
    homePage        = 'https://github.com/your_repo/bacass'
    description     = 'Bacterial assembly pipeline'
    mainScript      = 'main.nf'
    nextflowVersion = '>=21.10.3'
    version         = '1.0.0'
}

params {
    // Pipeline Options
    input = null

    // Defaults
    outdir = './results'
    tracedir = "${params.outdir}/pipeline_info"
}

profiles {
    docker {
        docker.enabled = true
        process {
            withName:FASTP      { container = 'quay.io/biocontainers/fastp:0.23.2--h5f740d0_3' }
            withName:FASTQC     { container = 'quay.io/biocontainers/fastqc:0.11.9--hdfd78af_1' }
            withName:MULTIQC    { container = 'quay.io/biocontainers/multiqc:1.13--pyhdfd78af_0' }
            withName:UNICYCLER  { container = 'quay.io/biocontainers/unicycler:0.5.0--py39h2add14b_0' }
        }
    }

    singularity {
        singularity.enabled = true
        process {
            withName:FASTP      { container = 'quay.io/biocontainers/fastp:0.23.2--h5f740d0_3' }
            withName:FASTQC     { container = 'quay.io/biocontainers/fastqc:0.11.9--hdfd78af_1' }
            withName:MULTIQC    { container = 'quay.io/biocontainers/multiqc:1.13--pyhdfd78af_0' }
            withName:UNICYCLER  { container = 'quay.io/biocontainers/unicycler:0.5.0--py39h2add14b_0' }
        }
    }

    conda {
        conda.enabled = true
        process {
            withName:FASTP      { conda = "bioconda::fastp=0.23.2" }
            withName:FASTQC     { conda = "bioconda::fastqc=0.11.9" }
            withName:MULTIQC    { conda = "bioconda::multiqc=1.13" }
            withName:UNICYCLER  { conda = "bioconda::unicycler=0.5.0" }
        }
    }
}

// Export reports
timeline {
    enabled = true
    file = "${params.tracedir}/execution_timeline.html"
}
report {
    enabled = true
    file = "${params.tracedir}/execution_report.html"
}
trace {
    enabled = true
    file = "${params.tracedir}/execution_trace.txt"
}
dag {
    enabled = true
    file = "${params.tracedir}/pipeline_dag.svg"
}
  ```
nextflow_schema.json
  ```
  {
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/your_repo/bacass/master/nextflow_schema.json",
    "title": "Bacass Pipeline Parameters",
    "description": "Bacterial assembly pipeline using fastp, fastqc, multiqc, and unicycler",
    "type": "object",
    "definitions": {
        "input_output_options": {
            "title": "Input/Output Options",
            "type": "object",
            "properties": {
                "input": {
                    "type": "string",
                    "description": "Path to samplesheet CSV file containing information about samples to be processed",
                    "help_text": "CSV file containing three columns: sample_id, fastq_1, fastq_2"
                },
                "outdir": {
                    "type": "string",
                    "description": "Path to the output directory where results will be saved",
                    "default": "./results"
                }
            },
            "required": ["input"]
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input_output_options"
        }
    ]
}
  ```
main.nf
  ```
  #!/usr/bin/env nextflow

nextflow.enable.dsl = 2

// Import modules
include { FASTP } from './modules/fastp'
include { FASTQC } from './modules/fastqc'
include { MULTIQC } from './modules/multiqc'
include { UNICYCLER } from './modules/unicycler'

// Main workflow
workflow {
    // Check samplesheet input
    if (params.input) { 
        Channel
            .fromPath(params.input)
            .splitCsv(header:true)
            .map { row -> tuple(row.sample_id, 
                              file(row.fastq_1, checkIfExists: true), 
                              file(row.fastq_2, checkIfExists: true)) }
            .set { ch_input }
    }

    // Run workflow
    FASTP(ch_input)
    FASTQC(FASTP.out.reads)
    MULTIQC(FASTQC.out.collect())
    UNICYCLER(FASTP.out.reads)
}
  ```
fastp.nf 
  ```
  process FASTP {
    tag "$sample_id"
    publishDir "results/fastp", mode: 'copy'

    input:
    tuple val(sample_id), path(reads1), path(reads2)

    output:
    tuple val(sample_id), path("*.fastp.fastq.gz"), emit: reads
    path "*.json", emit: json
    path "*.html", emit: html

    script:
    """
    fastp \\
        -i $reads1 \\
        -I $reads2 \\
        -o ${sample_id}_R1.fastp.fastq.gz \\
        -O ${sample_id}_R2.fastp.fastq.gz \\
        --json ${sample_id}_fastp.json \\
        --html ${sample_id}_fastp.html
    """
}
  ```
fastqc.nf 
  ```
      process FASTQC {
    tag "$sample_id"
    publishDir "results/fastqc", mode: 'copy'

    input:
    tuple val(sample_id), path(reads)

    output:
    path "*_fastqc.{zip,html}", emit: reports

    script:
    """
    fastqc $reads
    """
}
  ```
multiqc.nf
  ```
      process MULTIQC {
    publishDir "results/multiqc", mode: 'copy'

    input:
    path('*')

    output:
    path "multiqc_report.html"
    path "multiqc_data"

    script:
    """
    multiqc .
    """
}
  ```
unicycler.nf
  ```
      process UNICYCLER {
    tag "$sample_id"
    publishDir "results/unicycler", mode: 'copy'

    input:
    tuple val(sample_id), path(reads)

    output:
    path "${sample_id}_unicycler/*"

    script:
    def read1 = reads[0]
    def read2 = reads[1]
    """
    unicycler -1 $read1 -2 $read2 -o ${sample_id}_unicycler
    """
}
  ```
